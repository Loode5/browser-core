<h3>Types of tests</h3>

<p>
  The code can be tested on different levels. Currently the following types of tests have been
  implemented:
</p>

<ul>
  <li>unit tests,</li>
  <li>content tests,</li>
  <li>interaction tests.</li>
</ul>

<h4>Unit tests</h4>

<p>
  The lowest level of testing, covering the simplest blocks of code.
</p>

<p>
  The `unit-node` [[#-unit-node-|test runner]] browses the project tree using the following pattern:
  `/**/tests/**/unit/**/*-test.js`. Therefore, to include new unit tests:
</p>

<ul>
  <li>if it does not exist, create `tests` folder in the module folder you would like to test
    (it should be at the same level as <strong>sources</strong> and <strong>dist</strong> folders),</li>
  <li>in the `tests` folder create a `unit` subfolder,</li>
  <li>add tests files, separate for each submodule (following the [[#Name convention|naming convention]]).</li>
</ul>

<h4>Content and integration tests</h4>

<p>These tests are based on Mocha tests framework together with <a href="http://chaijs.com">Chai assertion library</a>. Both types install the extension in a browser.</p>


<h5>Content</h5>

<p>These tests check functionality of one or very few components in isolation, not in the whole working system. A typical usage of content testing would be detailed tests of UI components, rendering, simple interactions (e.g. Freshtab rendered inside the testing framework, not as a new tab opened in the browser). These tests cannot check communication between different modules, hence sometimes require mocking of some features.</p>

<p>To include new tests:</p>

<ul>
  <li>if it does not exist, create `tests` folder in the module folder you would like to test
    (it should be at the same level as <strong>sources</strong> and <strong>dist</strong> folders),</li>
  <li>in the `tests` folder create a `content` subfolder,</li>
  <li>add tests files, separate for each submodule (following the [[#Name convention|naming convention]]).</li>
</ul>

<h5>Integration</h5>

<p>These tests check the whole system (extension) and the way its components are working together. A typical usage of integration testing would be checks of telemetry/signal/messaging (e.g. Freshtab opened in a new tab to check if offer-related signals have been sent).</p>
<p>While it's a good idea to implement basic tests of static content elements as part of integration suites, detailed tests of this type should be part of content testing for the sake of simplicity and speed.</p>
