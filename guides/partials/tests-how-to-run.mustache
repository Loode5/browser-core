<h3>How to use fern</h3>

<h4>fern.js build</h4>

<p>Builds the extension once. Does not monitor changes in the project. Does not include tests.</p>

<h4>fern.js serve [optional flags] %lt;required config%gt;</h4>

<p>Builds the extension, installs it in the default browser, launches it and monitors changes in the project (rebuilds after detecting changes). Does not include tests.</p>

<p>Most useful flags include:</p>
<ul>
  <li>`--firefox [firefox path]`: specify Firefox version used to launch</li>
  <li>`--include-tests`: include test-related packages and modules to be able to launch tests</li>
</ul>

<p>Test pages have to be visited manually (see the [[#-url-options-|URL options]] section). The `serve` option does not run tests automatically.</p>

<h4>fern.js test</h4>

<p>Builds and installs an extension in [[#-launchers-|custom runner(s)]] from the provided config and automatically starts running tests (from the page `http://localhost:4200/6206/tests/index.mustache`).</p>

<p>Most useful flags include:</p>

<ul>
  <li>`--grep [pattern]`: only run tests matching [pattern],</li>
  <li>`--firefox [firefox path]`: specify Firefox path, if Firefox launcher will be used</li>
  <li>`-l --launchers [launchers]`: comma separted list of launchers.</li>
  <li>`--no-build`: skip the build and run tests only</li>
</ul>

<h4>fern.js lint</h4>

<p>Don't build, just run Linter and check for code errors. Can be run with a `--fix` flag, which will try to fix the errors automatically.</p>

<h4>Examples</h4>

<p>Serve in Firefox 55 and be able to run tests:</p>
```
./fern.js serve --include-tests --firefox /Applications/Firefox55.app/
```

<p>Run content tests in Chrome:</p>
```
./fern.js test -l Chrome
```

<p>Run unit tests:</p>
```
./fern.js test -l unit-node configs/ci/unit-tests.js
```

<h4>
  URL options for integration / content tests
</h4>

<p>
  Tests based on Firefox are opening URL `chrome://cliqz/content/firefox-tests/index.html`. Additional
  parameters can be passed as an extension to URL:
</p>
<ul>
  <li>`closeOnFinish`:
    <ul>
      <li>`1` to close the browser after tests are done,</li>
      <li>`0` to keep the browser open,</li>
    </ul>
  </li>
  <li>`forceExtensionReload`:
    <ul>
      <li>`0` to load extension only once at the beginning,</li>
      <li>`0.5` to reload extension every other test,</li>
      <li>`1` to reload extension before every single test,</li>
    </ul>
  </li>
  <li>`grep`:
    <ul>
      <li>pass any string to match text from `describe`, `context` and / or `it` blocks
          and run only the matching tests.</li>
    </ul>
  </li>
</ul>

<p>
  First parameter has to be passed after `?`, next parameters after `&`. Values of parameters
  are passed with `=`, e.g.:
</p>

```
chrome://cliqz/content/firefox-tests/index.html?closeOnFinish=1&forceExtensionReload=0
  &grep=dropdown
```

<h3>
  Launchers
</h3>

<p>
  `config/*.json` configuration files specify in the <em>testem_launchers</em> field which test
launchers are supposed to be running. You can choose from the following:
</p>

<ul>
  <li>pre-defined Test'em browser launchers like Chrome,</li>
  <li>unit-node,</li>
  <li>firefox-web-ext,</li>
  <li>firefox-web-ext-stresstest,</li>
  <li>chromium-selenium.</li>
</ul>

<p>
  If your `*.json` file has specified more than one launcher and you want to run tests using only one of
them, you can execute the `./fern.js test` command with a `-l` option, e.g.:
</p>

```
./fern.js test configs/jenkins.json -l unit-node
```

<h4>
  unit-node
</h4>

<p>
  Runs all <a href="./test-guidelines.html#unit-tests2">unit tests</a> and shows the result in the console output.
</p>

<h4>
  firefox-web-ext
</h4>

<p>
  Opens `resource://cliqz/firefox-tests/run-testem.html`. This file is located in folder
  `./modules/firefox-tests/dist/`.
</p>

<p>`run-testem.html` opens the test page with parameters `closeOnFinish=1` and
  `forceExtensionReload=0`, which means the browser will close after tests are finished and
  extension will be loaded only once (see [[#-url-options-|URL options]] for more details).
</p>

<h4>
  firefox-web-ext-stresstest
</h4>

<p>
  Opens `resource://cliqz/firefox-tests/run-testem-stresstest.html`. This file is located in folder
  `./modules/firefox-tests/dist/`.
</p>

<p>`run-testem.html` opens the test page with parameters `closeOnFinish=1` and
  `forceExtensionReload=1`, which means the browser will close after tests are finished and
  extension will be reloaded every second test (see [[#-url-options-|URL options]] for more details).
</p>

<h4>
  chromium-selenium
</h4>

<p>
  Opens `chrome-extension://ekfhhggnbajmjdmgihoageagkeklhema/modules/chromium-tests/test.html`.
  This file is located in folder `./modules/chromium-tests/dist/`.
</p>

<h3>How to run tests in Docker</h3>

<p>Sometimes you might want to emulate the CI/CD environment on your local machine (e.g. tests run locally are green while CI/CD keeps failing). It is possible to run a Docker container locally and check exactly what the test results are. Assuming you have already installed Docker and have it running, you can start a container with:</p>
```
./run_tests_in_docker.sh "[params for serve / test]"
```

<p>Parameters used for `fern` are equivalents of parameters you would be using when running `fern` locally, e.g. `-l [launcher]` if using `test`. For example:</p>
```
./run_tests_in_docker.sh "configs/ci/browser.js --firefox /home/node/firefoxNightly/firefox/firefox"
```

<p><strong>IMPORTANT:</strong></p>
<ul>
 <li>notice you have to pass the parameters using quotes,</li>
 <li>notice the Firefox path is not the one you use locally, but path specified in CI (see `Jenkinsfile` for reference what Firefox versions are currently available).</li>
</ul>

<p>This might take some time for the first run (and every time the Docker image has to be rebuilt). Eventually you will be able to connect to the Docker container (using VNC Viewer or similar software) using the following parameters:</p>

<ul>
  <li>VNC server address: `localhost:15900`</li>
  <li>password: `vnc`</li>
</ul>

<p>If upon connecting you see a black window the code is probably still being built. If you are using `fern.js test` and try to connect too late (when tests are finished), your connection will be refused.</p>

<p>You cannot have two containers running at the same time. If for some reasons your tests didn't finish correctly and you still have an active container, you can list all containers and their IDs with:</p>
```
docker ps
```
<p>Then you can close the outdated container with:</p>
```
docker stop [container ID]
```

<p>Which version of `fern` is running in Docker (`test` vs `serve`) is specified in `tests/run_tests.sh`. By default, Docker tests are running with the `test` option (as it starts the tests and closes the browser afterwards automatically):</p>
```
./fern.js test "$@" --ci report.xml
```

<p>For development, you can replace it with `serve`:</p>
```
./fern.js serve "$@" --include-tests
```

<p>Please don't forget to change it back to `test` after you're done.</p>
